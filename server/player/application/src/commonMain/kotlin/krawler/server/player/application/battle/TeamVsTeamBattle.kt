package krawler.server.player.application.battle

import kotlin.time.Instant

/**
 * Represents a battle between two opposing teams.
 *
 * This is a specific kind of [TeamBattle] where exactly two teams face each other.
 */
sealed interface TeamVsTeamBattle : TeamBattle {
    /** The first team in the battle. */
    val firstTeam: BattleParticipants

    /** The second team opposing to first one. */
    val secondTeam: BattleParticipants

    /** The star player of the battle. */
    val starPlayer: BattleStarPlayer

    /** The result of the battle. Can be null if it's a ranked league with unfinished game. */
    val result: BattleResult?
}

sealed interface MapMakerTeamVsTeamBattle : TeamVsTeamBattle, MapMakerBattle

sealed interface FriendlyTeamVsTeamBattle : TeamVsTeamBattle, FriendlyBattle {
    override val firstTeam: FriendlyBattleParticipants
    override val secondTeam: FriendlyBattleParticipants
    override val starPlayer: FriendlyBattleStarPlayer
}

/**
 * Represents a regular friendly battle between two teams.
 *
 * Used for casual matches between two teams where no ranking or trophies are involved.
 *
 * @property firstTeam The team considered as allies in this battle.
 * @property secondTeam The opposing team.
 * @property starPlayer The standout player of the battle (e.g., MVP).
 * @property result The outcome of the battle for the ally team.
 * @property time The timestamp when the battle occurred.
 * @property event The underlying event associated with this battle.
 */
data class RegularFriendlyTeamVsTeamBattle(
    override val firstTeam: FriendlyBattleParticipants,
    override val secondTeam: FriendlyBattleParticipants,
    override val starPlayer: FriendlyBattleStarPlayer,
    override val result: BattleResult,
    override val time: Instant,
    override val event: BattleEvent,
) : FriendlyTeamVsTeamBattle

/**
 * Represents a friendly battle generated by the Map Maker tool.
 *
 * Map Maker battles may have custom maps and rules. This class models
 * the resulting battle between two teams.
 *
 * @property result The outcome of the battle.
 * @property firstTeam The first team participating in the battle.
 * @property secondTeam The opposing team.
 * @property starPlayer The standout player of the battle.
 * @property time The timestamp when the battle occurred.
 * @property event The underlying mapmaker event associated with this battle.
 */
data class FriendlyMapMakerTeamVsTeamBattle(
    override val result: BattleResult,
    override val firstTeam: FriendlyBattleParticipants,
    override val secondTeam: FriendlyBattleParticipants,
    override val starPlayer: FriendlyBattleStarPlayer,
    override val time: Instant,
    override val event: MapMakerBattleEvent,
) : MapMakerTeamVsTeamBattle, FriendlyTeamVsTeamBattle

/**
 * Represents a global mapmaker battle with trophy-aware players.
 *
 * While not part of a trophy league directly, players' trophies are available and provided
 * by Brawl Stars API.
 *
 * @property result The outcome of the battle.
 * @property firstTeam The first team participating in the battle.
 * @property secondTeam The opposing team.
 * @property starPlayer The standout player of the battle.
 * @property time The timestamp when the battle occurred.
 * @property event The underlying mapmaker event associated with this battle.
 */
data class GlobalMapMakerTeamVsTeamBattle(
    override val result: BattleResult,
    override val firstTeam: TrophyLeagueBattlePlayers,
    override val secondTeam: TrophyLeagueBattlePlayers,
    override val starPlayer: BattleStarPlayer,
    override val time: Instant,
    override val event: MapMakerBattleEvent,
) : MapMakerTeamVsTeamBattle

/**
 * Represents a team-vs-team battle within the Trophy League.
 *
 * Tracks trophy changes and includes the official event data. Used for
 * competitive matches where performance affects playersâ€™ trophy counts.
 *
 * @property firstTeam The first team participating in the battle.
 * @property secondTeam The opposing team.
 * @property starPlayer The standout player of the battle.
 * @property result The outcome of the battle for the ally team.
 * @property time The timestamp when the battle occurred.
 * @property event The underlying official event associated with this battle.
 * @property trophyChange The trophy delta for each player after the battle.
 */
data class TrophyLeagueTeamVsTeamBattle(
    override val firstTeam: TrophyLeagueBattlePlayers,
    override val secondTeam: TrophyLeagueBattlePlayers,
    override val starPlayer: TrophyLeagueBattleStarPlayer,
    override val result: BattleResult,
    override val time: Instant,
    override val event: OfficialBattleEvent,
    override val trophyChange: TrophyChange,
) : TeamVsTeamBattle, TrophyLeagueBattle
